go_notes
--------

structure of program
--------------------

- your executable must have package main and must have the main function 

- import statements are other packages that can go into your own package

- if building a library of your own just name it the package different from main


syntax of go
------------

initialization
--------------

1. aString := "hello"

or

2. var aString string


- if you declare a variable and dont initialize it then the default value will be 0 for 
	mumbers, empty string for a string, false for bool etc...

- if you use method one then you MUST initialize it with a value right there and right then

- you can declare variables at the pakckage level or also the function level.

- you can initialize multiple values of the same value at the same time, below is an example 
	where variables are initialized in the function and also at the package level. with 
	multiple initialization


package main

import "fmt"

var x, y int = 4, 2

func main() {
	var i int
	fmt.Println(i, x, y)
}


- outside a function you must use the var keyword and you cannot use the short declaration 
	method


constants
---------

const PI = 3.14


- constants are useful as you cannot change the value later (duh), you must use const


loops
-----

- their are only for loops in go. you do not use parentheses but you must use brackets, 
	an example is give below

for
---

for i := 0; i < 10; i++ {
	// do something
}


"while"
-------

- just omit the pre and post statement to create a go while loop

for sum < 1000 {
	sum += sum
}


conditionals
------------

- just like the for loop no parens but you need the brackets

if i < 10 {
	// do something
}


pointers
--------

- like c pointers but no pointer arithemetic

num := 10
numPtr := &num
fmt.Println(*numPtr)


structs
-------

- structs are not classes but can still be used for some oop, an example is give below


package main

type Point struct {
	x int 
	y int
}

func main() {
	a = Point{1, -3}
	a.x = 2

	b = Point{} // implicit x = 0 and y = 0

	c = Point{x : 2} // implicit y = 0

	d = &Point{1, 2} // pointer to a 


}


- you can get the struct field with a dot as shown above


arrays
------

- arrays can be declared like so 

var a [2]string
a[0] = "hello "
a[1] = "world!"

or

a := []int {0, 1, 2, 3}


















































